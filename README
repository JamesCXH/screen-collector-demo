screen_action_recorder.py
========================
Records the main macOS display with **ffmpeg** and writes a JSON timeline of the most relevant user inputs.

Critical actions (→ JSON "kind")
--------------------------------
left_click/right_click – mouse button press→release. Press and release coordinates are logged so drags are implicit, though the path of the drag isn't recorded as a design choice (too much noise but may be meaningful). Any held modifiers (ctrl, command, option, shift) are prefixed in the description.
key_combo – non‑modifier key pressed while {command, ctrl or option} is down (e.g. command+S, ctrl+option+K). Note that while shift is a modifier, due to its use in typing, shift itself does not trigger a key combo (triggers typing instead when non-modifier keys are pressed). Further note that shift + other modifier does trigger a key_combo.
typing – sequence of printable characters plus \n, <BACKSPACE>, <DELETE>, \t; phrase closes after **5s** of silence (tunable). Note that just pressing tab/enter counts as typing whitespace.
modifier_hold – span during which one or more modifiers are held AND at least one normal key is pressed (logged as "mods held"). Used as held vs just modifier+press behave differently.

Every entry: `{kind, description, start, end}` – times are seconds since recording began. These are recorded on the application level and NOT the HID level (e.g., using Quartz) as a design choice (application level gives more faithful timestamps due to inherent OS delays before visibility on screen).
Note that it was also a choice to not use a slight offset in the start times to screenshot/log right before any action effects are visible, this can be done trivially.

Detection internals
-------------------
`pynput` listeners feed an `ActionTracker`.
* Mouse press stores context; release finalises the click action.
* Typing phrases are flushed by a 0.5s background check once the 5s gap elapses.
* Modifier blocks open/close automatically when the set of held modifiers changes.

CLI flags
---------
```
-f, --fps N   video frame‑rate (default 30)
--debug       capture screenshots around every action and overlay a live timer on the video
```

Session output
--------------
```
recordings/<n>/recording.mp4   remuxed MP4
recordings/<n>/recording.json  action timeline
recordings/<n>/screenshots/    only when --debug is used
```

Press **Esc** to stop recording.